1.GET /website/blog/123?pretty
得到的数据会和post put的格式一样，输出得很漂亮

2.GET /website/blog/123?_source=title,text
只取其中的title，text两个字段

3.GET /website/blog/123/_source
只取data，found和_index,_type等元数据不获取

4.HEAD xxxx
只关心是否存在，不关系内容,存在200，不存在404

5.PUT /website/blog/123/_create
{ ... }
创建新文档，id存在则返回错误409

6.PUT /website/blog/2?version=10&version_type=external
{
  "title": "My first external blog entry",
  "text":  "This is a piece of cake..."
}
创建文档时添加版本号，这种外部版本号一定要保证大于内置版本号，不然就会报版本异常，因为es就是通过version的版本大小来进行维护的

7.
POST /website/blog/1/_update
{
   "doc" : {
      "tags" : [ "testing" ],
      "views": 0
   }
}
doc是关键字，会为该文档添加tags和views两个属性，update的本质也是删除和替换，只是对外显示像是修改了部分,删除替换在分片内完成，提升效率

8.GET /_mget
{
   "docs" : [
      {
         "_index" : "website",
         "_type" :  "blog",
         "_id" :    2
      },
      {
         "_index" : "website",
         "_type" :  "pageviews",
         "_id" :    1,
         "_source": "views"
      }
   ]
}
从不同的index和type同时请求多个数据mget,其中docs是关键字,_source也是，_source后的值表示需要拿到的字段，第一条记录查看所有，第二条记录只要其中的views字段

9.GET /website/blog/_mget
{
   "docs" : [
      { "_id" : 2 },
      { "_type" : "pageviews", "_id" :   1 }
   ]
}
从相同的index下不同的type下获取，第一条是在blog的_type下的id为2的记录，第二条是pageviews为_type下记录为1的记录

10.GET /website/blog/_mget
{
   "ids" : [ "2", "1" ]
}
从同index，同type下的数据获取,如果第二个数据不存在，不会影响第一条记录的获取,通过元数据的found字段判断数据是否存在

11.Bulk api   批量操作
POST /_bulk
{   "create": { "_index": "website", "_type": "blog", "_id": "1243" }}
{ "title":    "My first blog post" }
{ "index":  { "_index": "website", "_type": "blog" }}
{ "title":    "My second blog post" }
{ "update": { "_index": "website", "_type": "blog", "_id": "123", "_retry_on_conflict" : 3} }
{ "doc" : {"title" : "My updated blog post"} } 
